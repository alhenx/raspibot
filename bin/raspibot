#!/bin/sh

INSTALLDIR="/opt/raspibot-setup"
BOTPATH="$INSTALLDIR/raspibot"
BOTPATH_BAK="$BOTPATH-bak"
TORRENTENDPATH="/opt/torrentsend"
TORRENTSFILE="$TORRENTENDPATH/torrentsended"
AMBILIGHT="boblight-dispmanx"
TORRENTALERTSCRIPT="/usr/bin/torrent-finished.sh"
RESTARTSCRIPT="/usr/local/bin/restartraspibot.sh"
RASPIBOTSYSCTL_FILE="/usr/local/bin/raspibotsysctl"
RASPIBOT_SERVICE="raspibot.service"
SYS_USER=$(echo $USER)

function update_bot {
	cd # Va a /home/$SYS_USER
	mv $BOTPATH $BOTPATH_BAK
	git clone https://github.com/alhenx/raspibot.git $BOTPATH --quiet

	echo "Identificando sistema operativo y gestor de paquetes..."
	declare -A osInfo;
	osInfo[/etc/arch-release]=pacman
	osInfo[/etc/debian_version]=apt-get

	for f in ${!osInfo[@]}
	do
	    if [[ -f $f ]];then
	    		SYSTEM_PM=${osInfo[$f]}
	        echo "El gestor de paquetes de su sistema es $SYSTEM_PM."
	    fi
	done

	case $SYSTEM_PM in
		pacman)
			PM_INSTALL="$SYSTEM_PM -S --noconfirm"
			PM_CHECK="$SYSTEM_PM -Q --noconfirm"
			TORRENTSERVICEPKG="transmission-cli"
			TORRENTCTL="transmission"
			TORRENTSERVICESETTINGS="/var/lib/transmission/.config/transmission-daemon/settings.json"
		;;
		apt-get)
			PM_INSTALL="$SYSTEM_PM install -y"
			PM_CHECK="apt-cache policy"
			TORRENTSERVICEPKG="transmission-daemon"
			TORRENTCTL="transmission-daemon"
			TORRENTSERVICESETTINGS="/var/lib/transmission-daemon/.config/transmission-daemon/settings.json"
		;;
	esac

	echo "Configurando nueva versión..."
	cp -r $BOTPATH_BAK/config $BOTPATH
	cp -r $BOTPATH_BAK/tmp $BOTPATH
	touch $BOTPATH/tmp/update
	echo "Eliminando versiones anteriores..."
	rm -rf $BOTPATH_BAK
	if [ -f $RESTARTSCRIPT ] ; then
		sudo rm -f $RESTARTSCRIPT >/dev/null 2>&1
		sudo sed -i '\^'"$RESTARTSCRIPT"'^d' /etc/sudoers
	fi
	if [ ! -f $BOTPATH/config/torrentuser ] ; then
		echo -e "\nComprobando si cuenta con $TORRENTSERVICEPKG en el sistema..."
		if (eval sudo $PM_CHECK $TORRENTSERVICEPKG >/dev/null 2>&1) ; then
			echo "Se ha detectado $TORRENTSERVICEPKG instalado en el sistema."

			if [[ $TORRENTSERVICEPKG == "transmission-daemon" ]]; then
				if (eval sudo $PM_CHECK transmission-cli >/dev/null 2>&1) ; then
					sudo $PM_INSTALL transmission-cli >/dev/null
				fi
			fi

			echo "A continuación es necesario introducir el usuario y contraseña"
			echo "del servicio para $TORRENTSERVICEPKG web. Introduzca su usuario:"
			read TORRENTUSER

			echo -e "\nIntroduzca la contraseña:"
			read TORRENTPASS

			echo "Se añadirá este servicio a la lista de alertas de RaspiBot."

			sudo sed -i 's^"script-torrent-done-enabled": false,^"script-torrent-done-enabled": true,^g' $TORRENTSERVICESETTINGS
			sudo sed -i 's^"script-torrent-done-filename": "",^"script-torrent-done-filename": "'"$TORRENTALERTSCRIPT"'",^g' $TORRENTSERVICESETTINGS

			echo -e '#!/bin/sh' | sudo tee $TORRENTALERTSCRIPT >/dev/null
			echo -e 'torrentsalertfile="'"$TORRENTSFILE"'"' | sudo tee --append $TORRENTALERTSCRIPT >/dev/null
			echo -e 'echo $TR_TORRENT_NAME > $torrentsalertfile' | sudo tee --append $TORRENTALERTSCRIPT >/dev/null
			echo -e "exit 0" | sudo tee --append $TORRENTALERTSCRIPT >/dev/null

			sudo systemctl reload $TORRENTCTLPKG

			sudo chmod a+x $TORRENTALERTSCRIPT
			echo -n $TORRENTUSER > $BOTPATH/config/torrentuser
			echo -n $TORRENTPASS > $BOTPATH/config/torrentpass
		fi
	fi
	if [ ! -f $RASPIBOTSYSCTL_FILE ] ; then
		sudo ln -s $BOTPATH/bin/raspibotsysctl $RASPIBOTSYSCTL_FILE
	fi
	raspibot restart
	echo "Actualización completada."
}
######################
#END update_bot

if [ "$1" != "" ]; then
	case $1 in
		"start")
			sudo $RASPIBOTSYSCTL_FILE start
		;;
		"stop")
			sudo $RASPIBOTSYSCTL_FILE stop
		;;
		"restart")
			sudo $RASPIBOTSYSCTL_FILE restart
		;;
		"status")
			sudo $RASPIBOTSYSCTL_FILE status
		;;
		"update")
			echo "******* ACTUALIZACIÓN SELECCIONADA *******"
			echo "Comprobando actualizaciones..."
			LOCALVERSION=$(cat $BOTPATH/version)
			REMOTEVERSION=$(curl -s https://raw.githubusercontent.com/alhenx/raspibot/master/version)
			if [ "$LOCALVERSION" != "$REMOTEVERSION" ]; then
				echo "Existe una nueva versión de RaspiBot. Actualizando..."
				update_bot # Utiliza la función update_bot.
			else
				echo "No hay actualizaciones disponibles para RaspiBot."
			fi
		;;
		"force-update")
			echo "******* ACTUALIZACIÓN FORZADA SELECCIONADA *******"
			update_bot # Utiliza la función update_bot.
		;;
		"exec")
			python /opt/raspibot-setup/raspibot/raspibot.py &
		;;
		"help")
			echo "Uso: rasipbot [opción]"
			echo "Las opciones disponbiles son:"
			echo -e "\t start - Inicia el servicio de RaspiBot."
			echo -e "\t stop - Para el servicio de RaspiBot."
			echo -e "\t restart - Reiniciar el servicio de RaspiBot."
			echo -e "\t status - Muestra el estado del servicio de RaspiBot."
			echo -e "\t exec - Ejecutable para RaspiBot (Python)."
			echo -e "\t update - Actualizar RaspiBot (CON comprobación de versiones)."
			echo -e "\t force-update - Actualizar RaspiBot (SIN comprobación de versiones)."
			echo -e "\t help - Muestra la ayuda."
		;;
		*)
			echo "Opción inválida. Use help para ver una lista de opciones."
		;;
	esac
else
	echo "Debe introducir una opción. Use help para ver una lista de opciones."
fi
